/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.85 95/04/24 10:48:47 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


 /* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
#pragma warn -rch
#pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

 /* Enter a start condition.  This macro really ought to take a parameter,
  * but we do it the disgusting crufty way forced on us by the ()-less
  * definition of BEGIN.
  */
#define BEGIN yy_start = 1 + 2 *

  /* Translate the current start state into a value that can be later handed
   * to BEGIN to return to the state.  The YYSTATE alias is for lex
   * compatibility.
   */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

   /* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state* YY_BUFFER_STATE;

extern int yyleng;
extern FILE* yyin, * yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

 /* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
{
	FILE* yy_input_file;

	char* yy_ch_buf;		/* input buffer */
	char* yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


 /* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char* yy_c_buf_p = (char*)0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO((FILE* input_file));

void yy_switch_to_buffer YY_PROTO((YY_BUFFER_STATE new_buffer));
void yy_load_buffer_state YY_PROTO((void));
YY_BUFFER_STATE yy_create_buffer YY_PROTO((FILE* file, int size));
void yy_delete_buffer YY_PROTO((YY_BUFFER_STATE b));
void yy_init_buffer YY_PROTO((YY_BUFFER_STATE b, FILE* file));
void yy_flush_buffer YY_PROTO((YY_BUFFER_STATE b));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO((char* base, yy_size_t size));
YY_BUFFER_STATE yy_scan_string YY_PROTO((yyconst char* str));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO((yyconst char* bytes, int len));

static void* yy_flex_alloc YY_PROTO((yy_size_t));
static void* yy_flex_realloc YY_PROTO((void*, yy_size_t));
static void yy_flex_free YY_PROTO((void*));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE* yyin = (FILE*)0, * yyout = (FILE*)0;
typedef int yy_state_type;
extern char* yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO((void));
static yy_state_type yy_try_NUL_trans YY_PROTO((yy_state_type current_state));
static int yy_get_next_buffer YY_PROTO((void));
static void yy_fatal_error YY_PROTO((yyconst char msg[]));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 141
#define YY_END_OF_BUFFER 142
static yyconst short int yy_accept[546] =
{ 0,
	0,    0,  134,  134,    0,    0,    0,    0,  142,  141,
	2,    1,  132,  104,  131,  124,  125,  100,   98,  130,
   99,  123,  101,  137,  108,  105,  109,  140,  140,  140,
  140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
  140,  140,  140,  140,  140,  140,  140,  126,  103,  127,
  102,  140,  140,  140,  128,  129,  134,  136,  135,    2,
  119,  131,  116,  114,    0,  115,  117,    0,  138,  137,
	0,  112,  110,  107,  106,  111,  113,  140,  140,    3,
  140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
  140,  140,  140,   10,  140,  140,  140,   10,  140,  140,

  140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
  140,  140,  140,  140,   22,  140,   27,  140,   27,  140,
  140,  140,  140,  140,  140,  140,   34,  140,  140,  140,
  140,  140,  140,  140,  140,   45,  140,   42,  140,   45,
  140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
  140,  140,  140,  140,  140,  140,  140,   69,  140,  140,
  140,  140,  140,  140,  140,  140,  140,  140,  140,  120,
  118,  140,  140,  140,  134,  133,    0,  139,    0,  138,
	0,  121,  122,    4,    4,  140,  140,  140,  140,  140,
  140,  140,  140,  140,  140,  140,  140,  140,  140,  140,

  140,   11,  140,  140,  140,  140,  140,   14,  140,  140,
  140,  140,  140,  140,  140,   21,  140,  140,  140,  140,
   25,  140,  140,  140,  140,  140,  140,  140,  140,  140,
   29,   26,  140,  140,  140,   36,   35,   37,  140,   39,
  140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
  140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
  140,  140,   59,  140,   58,  140,  140,  140,  140,  140,
  140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
  140,  140,  140,   73,  140,  140,  140,  140,  140,  140,
  140,  140,    0,  138,  140,  140,  140,  140,   78,  140,

  140,  140,  140,  140,   85,  140,    0,  140,   84,  140,
  140,  140,  140,   12,   16,   12,  140,   15,  140,  140,
  140,  140,  140,  140,  140,  140,  140,  140,  140,   31,
   72,  140,   30,   32,   38,   40,  140,  140,  140,  140,
  140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
  140,  140,  140,  140,  140,  140,   66,  140,   57,  140,
  140,  140,  140,  140,   67,   62,   68,  140,  140,  140,
  140,  140,  140,  140,  140,  140,   90,   91,  140,  140,
  140,  140,  140,    0,  140,  140,  140,    8,    9,  140,
  140,  140,    0,  140,  140,  140,  140,  140,  140,  140,

   17,   19,   18,  140,  140,  140,  140,   28,   23,  140,
   33,  140,  140,  140,  140,  140,  140,   48,  140,  140,
  140,  140,  140,  140,  140,  140,  140,   56,   81,  140,
  140,  140,  140,  140,  140,   60,  140,   65,   64,   70,
   71,  140,  140,  140,  140,  140,  140,   96,   76,    0,
  140,  140,  140,    6,  140,  140,   88,  140,  140,   82,
  140,   13,  140,   24,  140,  140,  140,   87,   46,   43,
  140,  140,  140,  140,  140,   53,   41,  140,   54,   80,
   61,   86,   63,  140,   97,   89,  140,  140,  140,  140,
	0,    5,   77,  140,  140,   83,  140,  140,   79,  140,

  140,   49,  140,  140,   52,   55,  140,  140,  140,  140,
  140,  140,    0,    7,   20,   44,  140,   51,  140,   75,
  140,  140,  140,  140,  140,    0,  140,   50,   92,  140,
  140,  140,   74,    0,   47,   93,  140,  140,   95,  140,
  140,   94,  140,   95,    0
};

static yyconst int yy_ec[256] =
{ 0,
	1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
	2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
	1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	1,    2,    1,    4,    1,    1,    1,    5,    6,    7,
	8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
   18,   19,   20,   18,   21,   18,   18,    1,    1,   22,
   23,   24,    1,    1,   25,   26,   27,   28,   29,   30,
   31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
   41,   42,   43,   44,   45,   46,   47,   48,   49,   41,
   50,   51,   52,   53,   41,    1,   54,   55,   56,   57,

   58,   59,   60,   61,   62,   63,   64,   65,   66,   67,
   68,   69,   41,   70,   71,   72,   73,   74,   75,   76,
   77,   41,   78,    1,   79,    1,    1,    1,    1,    1,
	1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

	1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	1,    1,    1,    1,    1
};

static yyconst int yy_meta[80] =
{ 0,
	1,    1,    2,    3,    1,    1,    1,    1,    1,    1,
	1,    1,    1,    1,    4,    4,    4,    4,    4,    4,
	4,    1,    1,    1,    4,    4,    4,    4,    4,    4,
	4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
	4,    4,    4,    4,    4,    4,    4,    4,    4,    1,
	1,    1,    1,    4,    4,    4,    4,    4,    4,    4,
	4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
	4,    4,    4,    4,    4,    4,    4,    1,    1
};

static yyconst short int yy_base[551] =
{ 0,
	0,    0,   77,   79,    0,    0,    0,    0,  698,  699,
  695,  699,  699,  673,    0,  699,  699,  672,  671,  699,
   67,  699,  670,   81,   63,  669,   65,   65,   56,   74,
   86,   90,  104,  633,    0,  121,  113,  128,  139,  147,
   50,   83,  161,  159,  109,   60,  622,  699,  666,  699,
  665,  629,  631,  615,  699,  699,    0,  699,  680,  681,
  699,    0,  699,  699,  666,  699,  699,  222,  234,    0,
  249,  658,  699,  699,  699,  699,  657,    0,  651,    0,
  621,  638,  141,  609,  607,  153,  649,  635,   60,  605,
  627,  643,  632,  623,  595,  610,  599,  591,  620,  634,

  628,  589,  590,   77,  588,  595,  620,  613,  616,  588,
  582,  589,  583,  577,    0,  604,  609,  110,  608,  610,
  605,  589,  141,  578,  147,  613,    0,  583,  582,   69,
  594,   86,  565,  571,  601,  605,  570,    0,  560,  602,
  560,   69,  559,  573,  583,  159,  566,  586,  586,  231,
  597,  112,  554,  554,  204,  149,  591,    0,  574,  560,
  551,  543,  546,  570,  559,  540,  578,  213,  540,  699,
  699,  555,  250,  546,    0,  699,  588,  263,  280,  292,
  307,  699,  699,  581,  580,  568,  574,  573,  576,  546,
  534,  540,  543,  538,  553,  550,  523,  585,  519,  561,

  556,    0,  562,  529,  524,  530,  555,    0,  539,  524,
  509,  514,  511,  506,  534,    0,  549,  504,  516,  517,
	0,  543,  532,  498,  511,  500,  538,  526,  494,  492,
	0,    0,  505,  498,  492,    0,    0,    0,  516,    0,
  487,  493,  528,  520,  497,  492,  488,  498,  262,  163,
  508,  485,  504,  483,  474,  473,  484,  502,  512,  498,
  501,  507,    0,  475,    0,  468,  477,  464,  466,  472,
  475,  494,  502,  463,  471,  470,  469,  493,  454,  462,
  487,  452,  456,    0,  463,  465,  448,  458,  151,  461,
  461,  442,  492,  322,  476,  446,  481,  479,    0,  472,

  437,  448,  446,  439,    0,  470,  445,  439,    0,  463,
  463,  432,  432,  463,    0,  462,  417,    0,  423,  463,
  447,  432,  422,  416,  456,  442,  415,  424,  411,    0,
	0,  424,    0,    0,    0,    0,  454,  437,  423,  410,
  406,  410,  403,  420,  415,  414,  417,  408,  427,  414,
  401,  396,  393,  420,  427,  429,    0,  423,    0,  388,
  394,  396,  390,  386,    0,    0,    0,  416,  418,  395,
  387,  422,  392,  391,  412,  391,  410,    0,  370,  379,
  380,  387,  383,  423,  396,  367,  412,    0,    0,  359,
  381,  396,  249,  366,  407,  402,  376,  371,  398,  368,

	0,    0,    0,  393,  368,  362,  394,    0,    0,  364,
	0,  377,  391,  347,  351,  359,  391,    0,  343,  344,
  357,  353,  355,  372,  353,  350,  340,    0,    0,  377,
  378,  373,  345,  346,  341,    0,  341,    0,    0,    0,
	0,  337,  334,  338,  359,  329,  332,    0,  343,  361,
  338,  308,  337,    0,  307,  328,  699,  299,  335,    0,
  305,    0,  330,    0,  300,  325,  296,    0,    0,  311,
  294,  305,  290,  289,  302,    0,    0,  301,    0,    0,
	0,    0,    0,  291,    0,    0,  295,  136,  300,  293,
  338,    0,    0,  324,  294,    0,  311,  281,    0,  282,

  276,    0,  268,  286,    0,    0,  277,  266,  270,  258,
  248,  251,  296,    0,    0,    0,  261,    0,  257,    0,
  247,  249,  223,  262,  232,  272,  208,    0,    0,  202,
  186,  177,    0,  226,    0,    0,  159,  141,  699,  150,
   59,    0,   39,    0,  699,  380,  384,  388,  103,  392
};

static yyconst short int yy_def[551] =
{ 0,
  545,    1,  546,  546,  547,  547,  547,  547,  545,  545,
  545,  545,  545,  545,  548,  545,  545,  545,  545,  545,
  545,  545,  545,  545,  545,  545,  545,  549,  549,  549,
  549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
  549,  549,  549,  549,  549,  549,  549,  545,  545,  545,
  545,  549,  549,  549,  545,  545,  550,  545,  545,  545,
  545,  548,  545,  545,  545,  545,  545,  545,  545,   24,
  545,  545,  545,  545,  545,  545,  545,  549,  549,  549,
  549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
  549,  549,  549,  549,  549,  549,  549,  549,  549,  549,

  549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
  549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
  549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
  549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
  549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
  549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
  549,  549,  549,  549,  549,  549,  549,  549,  549,  545,
  545,  549,  549,  549,  550,  545,  545,  545,  545,  545,
  545,  545,  545,  549,  549,  549,  549,  549,  549,  549,
  549,  549,  549,  549,  549,  549,  549,  549,  549,  549,

  549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
  549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
  549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
  549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
  549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
  549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
  549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
  549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
  549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
  549,  549,  545,  545,  549,  549,  549,  549,  549,  549,

  549,  549,  549,  549,  549,  549,  545,  549,  549,  549,
  549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
  549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
  549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
  549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
  549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
  549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
  549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
  549,  549,  549,  545,  549,  549,  549,  549,  549,  549,
  549,  549,  545,  549,  549,  549,  549,  549,  549,  549,

  549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
  549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
  549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
  549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
  549,  549,  549,  549,  549,  549,  549,  549,  549,  545,
  549,  549,  549,  549,  549,  549,  545,  549,  549,  549,
  549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
  549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
  549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
  545,  549,  549,  549,  549,  549,  549,  549,  549,  549,

  549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
  549,  549,  545,  549,  549,  549,  549,  549,  549,  549,
  549,  549,  549,  549,  549,  545,  549,  549,  549,  549,
  549,  549,  549,  545,  549,  549,  549,  549,  545,  549,
  549,  549,  549,  549,    0,  545,  545,  545,  545,  545
};

static yyconst short int yy_nxt[779] =
{ 0,
   10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
   20,   21,   22,   23,   24,   24,   24,   24,   24,   24,
   24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
   34,   35,   36,   35,   35,   37,   38,   39,   40,   41,
   35,   42,   43,   44,   45,   35,   46,   47,   35,   48,
   49,   50,   51,   35,   35,   35,   35,   35,   35,   35,
   35,   35,   35,   35,   35,   35,   35,   35,   35,   52,
   35,   35,   35,   53,   54,   35,   35,   55,   56,   58,
   59,   58,   59,   65,   72,   73,   74,   76,   77,   66,
   68,  167,   68,   69,   82,   70,   70,   70,   70,   70,

   70,   70,   79,  141,   83,   87,   78,   80,  544,   71,
   91,  145,   88,  197,   92,  238,  239,   84,   93,  142,
  168,  143,  144,   85,   94,   99,  543,  100,  107,  198,
  249,   81,   86,  208,   89,   80,  250,  101,   71,   95,
  146,   90,  108,   96,  147,  120,  164,   97,  109,  212,
  115,  121,  224,   98,  102,  103,  104,  110,  116,  105,
  238,  241,  509,  117,  165,  106,  126,  130,  122,  264,
  123,  111,  135,  112,  124,  166,  113,  131,  510,  115,
  125,  225,  187,  265,  188,  127,  189,  118,  136,  128,
  157,  119,  148,  149,  192,  129,  132,  158,  193,  230,

  159,  137,  234,  263,  150,  151,  133,  231,  379,  542,
  541,  134,  232,  138,  235,  139,  140,  271,  152,  160,
  161,  153,  154,  380,  194,  540,  158,  254,  162,  255,
  256,  345,  155,  156,  346,  163,  178,  178,  178,  178,
  178,  178,  178,  179,  539,  179,  538,  537,  180,  180,
  180,  180,  180,  180,  180,  260,  457,  268,   68,  261,
   68,  269,  181,  178,  178,  178,  178,  178,  178,  178,
  282,  536,  262,  270,  283,  286,  287,  178,  178,  178,
  178,  178,  178,  178,  535,  288,  534,  289,  290,  533,
  532,  181,  531,  291,  294,  294,  294,  294,  294,  294,

  294,  179,  530,  179,  529,  393,  180,  180,  180,  180,
  180,  180,  180,  528,  527,  526,  179,  525,  179,  524,
  181,  294,  294,  294,  294,  294,  294,  294,  343,  523,
  522,  179,  521,  179,  520,  344,  180,  180,  180,  180,
  180,  180,  180,  519,  518,  517,  516,  515,  515,  181,
  181,  514,  514,  513,  512,  511,  508,  507,  506,  505,
  504,  503,  502,  501,  500,  499,  499,  498,  497,  496,
  496,  495,  494,  493,  493,  492,  492,  491,  490,  181,
   57,   57,   57,   57,   10,   10,   10,   10,   62,  489,
   62,   62,  175,  488,  487,  175,  486,  485,  484,  483,

  482,  481,  480,  482,  481,  480,  477,  479,  478,  477,
  476,  475,  474,  473,  472,  471,  469,  470,  468,  469,
  468,  467,  466,  465,  464,  463,  462,  462,  460,  461,
  460,  459,  458,  456,  455,  454,  453,  452,  451,  450,
  449,  448,  447,  446,  445,  444,  443,  442,  440,  441,
  440,  438,  439,  438,  437,  436,  435,  434,  433,  429,
  432,  431,  430,  429,  428,  427,  426,  425,  424,  423,
  422,  421,  420,  419,  418,  417,  416,  415,  414,  413,
  412,  411,  408,  410,  409,  408,  407,  406,  405,  403,
  404,  403,  402,  401,  400,  399,  398,  397,  396,  395,

  394,  393,  392,  389,  388,  391,  390,  389,  388,  387,
  386,  385,  384,  383,  382,  381,  378,  377,  376,  375,
  374,  373,  372,  371,  370,  369,  368,  366,  367,  365,
  366,  365,  364,  363,  357,  362,  361,  360,  359,  358,
  357,  356,  355,  354,  353,  352,  351,  350,  349,  348,
  347,  342,  341,  340,  339,  338,  337,  336,  335,  335,
  331,  334,  330,  333,  332,  331,  330,  329,  328,  327,
  326,  325,  324,  323,  322,  321,  320,  315,  319,  318,
  317,  316,  315,  314,  313,  312,  309,  311,  310,  309,
  308,  307,  305,  306,  305,  299,  304,  303,  302,  301,

  300,  299,  298,  297,  296,  295,  293,  292,  285,  284,
  281,  280,  279,  278,  277,  276,  275,  274,  273,  272,
  267,  266,  263,  259,  258,  257,  253,  252,  251,  248,
  247,  246,  245,  244,  243,  242,  240,  240,  236,  237,
  236,  233,  229,  228,  227,  226,  223,  222,  221,  220,
  219,  216,  218,  217,  216,  215,  214,  213,  211,  210,
  209,  208,  207,  206,  202,  205,  204,  203,  202,  201,
  200,  199,  196,  195,  191,  190,  186,  185,  184,  183,
  182,  177,   60,  176,  174,  173,  172,  171,  170,  169,
  114,   75,   67,   64,   63,   61,   60,  545,    9,  545,

  545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
  545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
  545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
  545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
  545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
  545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
  545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
  545,  545,  545,  545,  545,  545,  545,  545
};

static yyconst short int yy_chk[779] =
{ 0,
	1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
	3,    4,    4,   21,   25,   25,   25,   27,   27,   21,
   24,   46,   24,   24,   29,   24,   24,   24,   24,   24,

   24,   24,   28,   41,   29,   30,  549,   28,  543,   24,
   31,   42,   30,   89,   31,  130,  130,   29,   31,   41,
   46,   41,   41,   29,   31,   32,  541,   32,   33,   89,
  142,   28,   29,  104,   30,   28,  142,   32,   24,   31,
   42,   30,   33,   31,   42,   37,   45,   31,   33,  104,
   36,   37,  118,   31,   32,   32,   32,   33,   36,   32,
  132,  132,  488,   36,   45,   32,   38,   39,   37,  152,
   37,   33,   40,   33,   37,   45,   33,   39,  488,   36,
   37,  118,   83,  152,   83,   38,   83,   36,   40,   38,
   44,   36,   43,   43,   86,   38,   39,   44,   86,  123,

   44,   40,  125,  156,   43,   43,   39,  123,  289,  540,
  538,   39,  123,   40,  125,   40,   40,  156,   43,   44,
   44,   43,   43,  289,   86,  537,   44,  146,   44,  146,
  146,  250,   43,   43,  250,   44,   68,   68,   68,   68,
   68,   68,   68,   69,  534,   69,  532,  531,   69,   69,
   69,   69,   69,   69,   69,  150,  393,  155,   71,  150,
   71,  155,   69,   71,   71,   71,   71,   71,   71,   71,
  168,  530,  150,  155,  168,  173,  173,  178,  178,  178,
  178,  178,  178,  178,  527,  173,  526,  173,  173,  525,
  524,   69,  523,  173,  179,  179,  179,  179,  179,  179,

  179,  180,  522,  180,  521,  393,  180,  180,  180,  180,
  180,  180,  180,  519,  517,  513,  181,  512,  181,  511,
  180,  181,  181,  181,  181,  181,  181,  181,  249,  510,
  509,  294,  508,  294,  507,  249,  294,  294,  294,  294,
  294,  294,  294,  504,  503,  501,  500,  498,  497,  180,
  294,  495,  494,  491,  490,  489,  487,  484,  478,  475,
  474,  473,  472,  471,  470,  467,  466,  465,  463,  461,
  459,  458,  456,  455,  453,  452,  451,  450,  449,  294,
  546,  546,  546,  546,  547,  547,  547,  547,  548,  447,
  548,  548,  550,  446,  445,  550,  444,  443,  442,  437,

  435,  434,  433,  432,  431,  430,  427,  426,  425,  424,
  423,  422,  421,  420,  419,  417,  416,  415,  414,  413,
  412,  410,  407,  406,  405,  404,  400,  399,  398,  397,
  396,  395,  394,  392,  391,  390,  387,  386,  385,  384,
  383,  382,  381,  380,  379,  377,  376,  375,  374,  373,
  372,  371,  370,  369,  368,  364,  363,  362,  361,  360,
  358,  356,  355,  354,  353,  352,  351,  350,  349,  348,
  347,  346,  345,  344,  343,  342,  341,  340,  339,  338,
  337,  332,  329,  328,  327,  326,  325,  324,  323,  322,
  321,  320,  319,  317,  316,  314,  313,  312,  311,  310,

  308,  307,  306,  304,  303,  302,  301,  300,  298,  297,
  296,  295,  293,  292,  291,  290,  288,  287,  286,  285,
  283,  282,  281,  280,  279,  278,  277,  276,  275,  274,
  273,  272,  271,  270,  269,  268,  267,  266,  264,  262,
  261,  260,  259,  258,  257,  256,  255,  254,  253,  252,
  251,  248,  247,  246,  245,  244,  243,  242,  241,  239,
  235,  234,  233,  230,  229,  228,  227,  226,  225,  224,
  223,  222,  220,  219,  218,  217,  215,  214,  213,  212,
  211,  210,  209,  207,  206,  205,  204,  203,  201,  200,
  199,  198,  197,  196,  195,  194,  193,  192,  191,  190,

  189,  188,  187,  186,  185,  184,  177,  174,  172,  169,
  167,  166,  165,  164,  163,  162,  161,  160,  159,  157,
  154,  153,  151,  149,  148,  147,  145,  144,  143,  141,
  140,  139,  137,  136,  135,  134,  133,  131,  129,  128,
  126,  124,  122,  121,  120,  119,  117,  116,  114,  113,
  112,  111,  110,  109,  108,  107,  106,  105,  103,  102,
  101,  100,   99,   98,   97,   96,   95,   94,   93,   92,
   91,   90,   88,   87,   85,   84,   82,   81,   79,   77,
   72,   65,   60,   59,   54,   53,   52,   51,   49,   47,
   34,   26,   23,   19,   18,   14,   11,    9,  545,  545,

  545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
  545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
  545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
  545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
  545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
  545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
  545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
  545,  545,  545,  545,  545,  545,  545,  545
};

static yy_state_type yy_last_accepting_state;
static char* yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
char* yytext;
#line 1 "lex.l"
#define INITIAL 0
#line 2 "lex.l"
#include "gram_tab.h"
extern int yyparse();
#define YY_NEVER_INTERACTIVE 1
#define STRING_VAL 1

#define ARRAY 2

#define NUMBER 3

#line 17 "lex.l"
#pragma warning(disable : 4996)
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <fstream>
#include <iostream>

using namespace std;

void delete_();
void eraseType(char* typeName);
char str[1024];
char strNew[1024];
int lineNumber = 1;
bool finished = false;
#line 743 "lex.yy.c"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO((void));
#else
extern int yywrap YY_PROTO((void));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO((int c, char* buf_ptr));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO((char*, yyconst char*, int));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO((void));
#else
static int input YY_PROTO((void));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int* yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO((int new_state));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO((void));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO((void));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

 /* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

 /* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
  * is returned in "result".
  */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

  /* No semi-colon after return; correct usage is to write "yyterminate();" -
   * we don't want an extra ';' after the "return" because that will cause
   * some compilers to complain about unreachable statements.
   */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

   /* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

 /* Code executed at the beginning of each rule, after yytext and yyleng
  * have been set up.
  */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

  /* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
{
register yy_state_type yy_current_state;
register char* yy_cp,* yy_bp;
register int yy_act;

#line 35 "lex.l"






#line 897 "lex.yy.c"

	if (yy_init)
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if (!yy_start)
			yy_start = 1;	/* first start state */

		if (!yyin)
			yyin = stdin;

		if (!yyout)
			yyout = stdout;

		if (!yy_current_buffer)
			yy_current_buffer =
				yy_create_buffer(yyin, YY_BUF_SIZE);

		yy_load_buffer_state();
		}

	while (1)		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if (yy_accept[yy_current_state])
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state)
				{
				yy_current_state = (int)yy_def[yy_current_state];
				if (yy_current_state >= 546)
					yy_c = yy_meta[(unsigned int)yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int)yy_c];
			++yy_cp;
			} while (yy_base[yy_current_state] != 699);

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if (yy_act == 0)
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch (yy_act)
	{ /* beginning of action switch */
			case 0: /* must back up */
				/* undo the effects of YY_DO_BEFORE_ACTION */
				*yy_cp = yy_hold_char;
				yy_cp = yy_last_accepting_cpos;
				yy_current_state = yy_last_accepting_state;
				goto yy_find_action;

	case 1:
	YY_RULE_SETUP
	#line 41 "lex.l"
	{ printf("Found TOKEN_LINE: \n"); lineNumber++; return TOKEN_LINE; }
		YY_BREAK
	case 2:
	YY_RULE_SETUP
	#line 42 "lex.l"
	{}
		YY_BREAK
	case 3:
	YY_RULE_SETUP
	#line 44 "lex.l"
	{ printf("Found KW_AS: %s\n", yytext); return As; }
		YY_BREAK
	case 4:
	YY_RULE_SETUP
	#line 45 "lex.l"
	{ printf("Found KW_AND: %s\n", yytext); return AND; }
		YY_BREAK
	case 5:
	YY_RULE_SETUP
	#line 46 "lex.l"
	{ printf("Found KW_AND_ALSO: %s\n", yytext); return ANDALSO; }
		YY_BREAK
	case 6:
	YY_RULE_SETUP
	#line 47 "lex.l"
	{ printf("Found KW_BINARY: %s\n", yytext); }
		YY_BREAK
	case 7:
	YY_RULE_SETUP
	#line 48 "lex.l"
	{ printf("Found KW_CONTINUE: %s\n", yytext); return CONTINUE; }
		YY_BREAK
	case 8:
	YY_RULE_SETUP
	#line 49 "lex.l"
	{ printf("Found KW_BYREF: %s\n", yytext); return ByRef; }
		YY_BREAK
	case 9:
	YY_RULE_SETUP
	#line 50 "lex.l"
	{ printf("Found KW_BYVAL: %s\n", yytext); return ByVal; }
		YY_BREAK
	case 10:
	YY_RULE_SETUP
	#line 51 "lex.l"
	{ printf("Found KW_DO: %s\n", yytext); return DO; }
		YY_BREAK
	case 11:
	YY_RULE_SETUP
	#line 52 "lex.l"
	{ printf("Found KW_DIM: %s\n", yytext); return DIM; }
		YY_BREAK
	case 12:
	YY_RULE_SETUP
	#line 53 "lex.l"
	{ printf("Found KW_ELSE: %s\n", yytext); return ELSE; }
		YY_BREAK
	case 13:
	YY_RULE_SETUP
	#line 54 "lex.l"
	{ printf("Found KW_ELSEIF: %s\n", yytext); return ELSEIF; }
		YY_BREAK
	case 14:
	YY_RULE_SETUP
	#line 55 "lex.l"
	{ printf("Found KW_END: %s\n", yytext); return END; }
		YY_BREAK
	case 15:
	YY_RULE_SETUP
	#line 56 "lex.l"
	{ printf("Found KW_ENUM: %s\n", yytext); }
		YY_BREAK
	case 16:
	YY_RULE_SETUP
	#line 57 "lex.l"
	{ printf("Found KW_EXIT: %s\n", yytext); return EXIT; }
		YY_BREAK
	case 17:
	YY_RULE_SETUP
	#line 58 "lex.l"
	{ printf("Found KW_EMPTY: %s\n", yytext); }
		YY_BREAK
	case 18:
	YY_RULE_SETUP
	#line 59 "lex.l"
	{ printf("Found KW_FALSE: %s\n", yytext); return KW_FALSE; }
		YY_BREAK
	case 19:
	YY_RULE_SETUP
	#line 60 "lex.l"
	{ printf("Found KW_ERROR: %s\n", yytext); }
		YY_BREAK
	case 20:
	YY_RULE_SETUP
	#line 61 "lex.l"
	{ printf("Found KW_FUNCTION: %s\n", yytext); return Function; }
		YY_BREAK
	case 21:
	YY_RULE_SETUP
	#line 62 "lex.l"
	{ printf("Found KW_FOR: %s\n", yytext); return FOR; }
		YY_BREAK
	case 22:
	YY_RULE_SETUP
	#line 63 "lex.l"
	{ printf("Found KW_IF: %s\n", yytext); return IF; }
		YY_BREAK
	case 23:
	YY_RULE_SETUP
	#line 64 "lex.l"
	{ printf("Found KW_INSTR: %s\n", yytext); }
		YY_BREAK
	case 24:
	YY_RULE_SETUP
	#line 65 "lex.l"
	{ printf("Found KW_FRIEND: %s\n", yytext); }
		YY_BREAK
	case 25:
	YY_RULE_SETUP
	#line 66 "lex.l"
	{ printf("Found KW_GET: %s\n", yytext); }
		YY_BREAK
	case 26:
	YY_RULE_SETUP
	#line 67 "lex.l"
	{ printf("Found KW_LET: %s\n", yytext); }
		YY_BREAK
	case 27:
	YY_RULE_SETUP
	#line 68 "lex.l"
	{ printf("Found KW_IS: %s\n", yytext); return Is; }
		YY_BREAK
	case 28:
	YY_RULE_SETUP
	#line 69 "lex.l"
	{ printf("Found KW_ISNOT: %s\n", yytext); return IsNot; }
		YY_BREAK
	case 29:
	YY_RULE_SETUP
	#line 70 "lex.l"
	{ printf("Found KW_LEN: %s\n", yytext); }
		YY_BREAK
	case 30:
	YY_RULE_SETUP
	#line 71 "lex.l"
	{ printf("Found KW_LEFT: %s\n", yytext); }
		YY_BREAK
	case 31:
	YY_RULE_SETUP
	#line 72 "lex.l"
	{ printf("Found KW_LIKE: %s\n", yytext); return Like; }
		YY_BREAK
	case 32:
	YY_RULE_SETUP
	#line 73 "lex.l"
	{ printf("Found KW_Lock: %s\n", yytext); }
		YY_BREAK
	case 33:
	YY_RULE_SETUP
	#line 74 "lex.l"
	{ printf("Found KW_LCASE: %s\n", yytext); }
		YY_BREAK
	case 34:
	YY_RULE_SETUP
	#line 75 "lex.l"
	{ printf("Found KW_ME: %s\n", yytext); }
		YY_BREAK
	case 35:
	YY_RULE_SETUP
	#line 76 "lex.l"
	{ printf("Found KW_MID: %s\n", yytext); }
		YY_BREAK
	case 36:
	YY_RULE_SETUP
	#line 77 "lex.l"
	{ printf("Found KW_MOD: %s\n", yytext); return MOD; }
		YY_BREAK
	case 37:
	YY_RULE_SETUP
	#line 78 "lex.l"
	{ printf("Found KW_NEW: %s\n", yytext); return NEW; }
		YY_BREAK
	case 38:
	YY_RULE_SETUP
	#line 79 "lex.l"
	{ printf("Found KW_NEXT: %s\n", yytext); return NEXT; }
		YY_BREAK
	case 39:
	YY_RULE_SETUP
	#line 80 "lex.l"
	{ printf("Found KW_NOT: %s\n", yytext); return Not; }
		YY_BREAK
	case 40:
	YY_RULE_SETUP
	#line 81 "lex.l"
	{ printf("Found KW_NULL: %s\n", yytext); }
		YY_BREAK
	case 41:
	YY_RULE_SETUP
	#line 82 "lex.l"
	{ printf("Found KW_RETURN: %s\n", yytext); return RETURN; }
		YY_BREAK
	case 42:
	YY_RULE_SETUP
	#line 83 "lex.l"
	{ printf("Found KW_ON: %s\n", yytext); }
		YY_BREAK
	case 43:
	YY_RULE_SETUP
	#line 84 "lex.l"
	{ printf("Found KW_OPTION: %s\n", yytext); }
		YY_BREAK
	case 44:
	YY_RULE_SETUP
	#line 85 "lex.l"
	{ printf("Found KW_OPTIONAL: %s\n", yytext); }
		YY_BREAK
	case 45:
	YY_RULE_SETUP
	#line 86 "lex.l"
	{ printf("Found KW_OR: %s\n", yytext); return OR; }
		YY_BREAK
	case 46:
	YY_RULE_SETUP
	#line 87 "lex.l"
	{ printf("Found KW_OR_ELSE: %s\n", yytext); return ORELSE; }
		YY_BREAK
	case 47:
	YY_RULE_SETUP
	#line 88 "lex.l"
	{ printf("Found KW_PARAMARRAY: %s\n", yytext); }
		YY_BREAK
	case 48:
	YY_RULE_SETUP
	#line 89 "lex.l"
	{ printf("Found KW_PRINT: %s\n", yytext); }
		YY_BREAK
	case 49:
	YY_RULE_SETUP
	#line 90 "lex.l"
	{ printf("Found KW_PRIVATE: %s\n", yytext); }
		YY_BREAK
	case 50:
	YY_RULE_SETUP
	#line 91 "lex.l"
	{ printf("Found KW_PROTECTED: %s\n", yytext); }
		YY_BREAK
	case 51:
	YY_RULE_SETUP
	#line 92 "lex.l"
	{ printf("Found KW_PROPERTY: %s\n", yytext); }
		YY_BREAK
	case 52:
	YY_RULE_SETUP
	#line 93 "lex.l"
	{ printf("Found KW_PTRSAFE: %s\n", yytext); }
		YY_BREAK
	case 53:
	YY_RULE_SETUP
	#line 94 "lex.l"
	{ printf("Found KW_PUBLIC: %s\n", yytext); }
		YY_BREAK
	case 54:
	YY_RULE_SETUP
	#line 95 "lex.l"
	{ printf("Found KW_RESUME: %s\n", yytext); }
		YY_BREAK
	case 55:
	YY_RULE_SETUP
	#line 96 "lex.l"
	{ printf("Found KW_REPLACE: %s\n", yytext); }
		YY_BREAK
	case 56:
	YY_RULE_SETUP
	#line 97 "lex.l"
	{ printf("Found KW_RIGHT: %s\n", yytext); }
		YY_BREAK
	case 57:
	YY_RULE_SETUP
	#line 98 "lex.l"
	{ printf("Found KW_SEEK: %s\n", yytext); }
		YY_BREAK
	case 58:
	YY_RULE_SETUP
	#line 99 "lex.l"
	{ printf("Found KW_SET: %s\n", yytext); }
		YY_BREAK
	case 59:
	YY_RULE_SETUP
	#line 100 "lex.l"
	{ printf("Found KW_SUB: %s\n", yytext); return Sub; }
		YY_BREAK
	case 60:
	YY_RULE_SETUP
	#line 101 "lex.l"
	{ printf("Found KW_SUPER: %s\n", yytext); }
		YY_BREAK
	case 61:
	YY_RULE_SETUP
	#line 102 "lex.l"
	{ printf("Found KW_STATIC: %s\n", yytext); return KW_STATIC; }
		YY_BREAK
	case 62:
	YY_RULE_SETUP
	#line 103 "lex.l"
	{ printf("Found KW_TRUE: %s\n", yytext); return KW_TRUE; }
		YY_BREAK
	case 63:
	YY_RULE_SETUP
	#line 104 "lex.l"
	{ printf("Found KW_TypeOf: %s\n", yytext); return TypeOf; }
		YY_BREAK
	case 64:
	YY_RULE_SETUP
	#line 105 "lex.l"
	{ printf("Found KW_UCASE: %s\n", yytext); }
		YY_BREAK
	case 65:
	YY_RULE_SETUP
	#line 106 "lex.l"
	{ printf("Found UNTIL: %s\n", yytext); return UNTIL; }
		YY_BREAK
	case 66:
	YY_RULE_SETUP
	#line 107 "lex.l"
	{ printf("Found KW_STEP: %s\n", yytext); return STEP; }
		YY_BREAK
	case 67:
	YY_RULE_SETUP
	#line 108 "lex.l"
	{ printf("Found KW_THEN: %s\n", yytext); return THEN; }
		YY_BREAK
	case 68:
	YY_RULE_SETUP
	#line 109 "lex.l"
	{ printf("Found KW_TIME: %s\n", yytext); }
		YY_BREAK
	case 69:
	YY_RULE_SETUP
	#line 110 "lex.l"
	{ printf("Found KW_TO: %s\n", yytext); return TO; }
		YY_BREAK
	case 70:
	YY_RULE_SETUP
	#line 111 "lex.l"
	{ printf("Found KW_WHILE: %s\n", yytext); return WHILE; }
		YY_BREAK
	case 71:
	YY_RULE_SETUP
	#line 112 "lex.l"
	{ printf("Found KW_WHERE: %s\n", yytext); }
		YY_BREAK
	case 72:
	YY_RULE_SETUP
	#line 113 "lex.l"
	{ printf("Found KW_LOOP: %s\n", yytext); return LOOP; }
		YY_BREAK
	case 73:
	YY_RULE_SETUP
	#line 114 "lex.l"
	{ printf("Found KW_Xor: %s\n", yytext); }
		YY_BREAK
	case 74:
	YY_RULE_SETUP
	#line 115 "lex.l"
	{printf("Found Console_Function_writeLine: %s\n", yytext); }
		YY_BREAK
	case 75:
	YY_RULE_SETUP
	#line 116 "lex.l"
	{printf("Found Console_Function_readLine: %s\n", yytext); }
		YY_BREAK
	case 76:
	YY_RULE_SETUP
	#line 117 "lex.l"
	{printf("Found Console_Function_write: %s\n", yytext); }
		YY_BREAK
	case 77:
	YY_RULE_SETUP
	#line 119 "lex.l"
	{ printf("Found TYPE_BOOLEAN: %s\n", yytext); return TYPE_BOOLEAN; }
		YY_BREAK
	case 78:
	YY_RULE_SETUP
	#line 120 "lex.l"
	{ printf("Found TYPE_BYTE: %s\n", yytext); return TYPE_BYTE; }
		YY_BREAK
	case 79:
	YY_RULE_SETUP
	#line 121 "lex.l"
	{ printf("Found TYPE_INTEGER: %s\n", yytext); return TYPE_INTEGER; }
		YY_BREAK
	case 80:
	YY_RULE_SETUP
	#line 122 "lex.l"
	{ printf("Found TYPE_SINGLE: %s\n", yytext); return TYPE_SINGLE; }
		YY_BREAK
	case 81:
	YY_RULE_SETUP
	#line 123 "lex.l"
	{ printf("Found TYPE_SHORT: %s\n", yytext); return TYPE_SHORT; }
		YY_BREAK
	case 82:
	YY_RULE_SETUP
	#line 124 "lex.l"
	{ printf("Found TYPE_DOUBLE: %s\n", yytext); return TYPE_DOUBLE; }
		YY_BREAK
	case 83:
	YY_RULE_SETUP
	#line 125 "lex.l"
	{ printf("Found TYPE_DECIMAL: %s\n", yytext); return TYPE_DECIMAL; }
		YY_BREAK
	case 84:
	YY_RULE_SETUP
	#line 126 "lex.l"
	{ printf("Found TYPE_DATE: %s\n", yytext); return TYPE_DATE; }
		YY_BREAK
	case 85:
	YY_RULE_SETUP
	#line 127 "lex.l"
	{ printf("Found TYPE_CHAR: %s\n", yytext); return TYPE_CHAR; }
		YY_BREAK
	case 86:
	YY_RULE_SETUP
	#line 128 "lex.l"
	{ printf("Found TYPE_STRING: %s\n", yytext); return TYPE_STRING; }
		YY_BREAK
	case 87:
	YY_RULE_SETUP
	#line 129 "lex.l"
	{ printf("Found TYPE_OBJECT: %s\n", yytext); return TYPE_OBJECT; }
		YY_BREAK
	case 88:
	YY_RULE_SETUP
	#line 131 "lex.l"
	{ printf("Found CHR_CODE: %s\n", yytext); }
		YY_BREAK
	case 89:
	YY_RULE_SETUP
	#line 133 "lex.l"
	{ printf("Found TYPE_CR_LF: %s\n", yytext); }
		YY_BREAK
	case 90:
	YY_RULE_SETUP
	#line 134 "lex.l"
	{ printf("Found TYPE_CR: %s\n", yytext); }
		YY_BREAK
	case 91:
	YY_RULE_SETUP
	#line 135 "lex.l"
	{ printf("Found TYPE_LF: %s\n", yytext); }
		YY_BREAK
	case 92:
	YY_RULE_SETUP
	#line 136 "lex.l"
	{ printf("Found TYPE_NEW_LINE: %s\n", yytext); }
		YY_BREAK
	case 93:
	YY_RULE_SETUP
	#line 137 "lex.l"
	{ printf("Found TYPE_NULL_CHAR: %s\n", yytext); }
		YY_BREAK
	case 94:
	YY_RULE_SETUP
	#line 138 "lex.l"
	{ printf("Found TYPE_NULL_STRING: %s\n", yytext); }
		YY_BREAK
	case 95:
	YY_RULE_SETUP
	#line 139 "lex.l"
	{ printf("Found TYPE_OBJECT_ERROR: %s\n", yytext); }
		YY_BREAK
	case 96:
	YY_RULE_SETUP
	#line 140 "lex.l"
	{ printf("Found TYPE_TAB: %s\n", yytext); }
		YY_BREAK
	case 97:
	YY_RULE_SETUP
	#line 141 "lex.l"
	{ printf("Found TYPE_BACK: %s\n", yytext); }
		YY_BREAK
	case 98:
	YY_RULE_SETUP
	#line 143 "lex.l"
	{ printf("Found OPERATOR_PLUS: %s\n", yytext); return '+'; }
		YY_BREAK
	case 99:
	YY_RULE_SETUP
	#line 144 "lex.l"
	{ printf("Found OPERATOR_MINUS: %s\n", yytext); return '-'; }
		YY_BREAK
	case 100:
	YY_RULE_SETUP
	#line 145 "lex.l"
	{ printf("Found OPERATOR_MUL: %s\n", yytext); return '*'; }
		YY_BREAK
	case 101:
	YY_RULE_SETUP
	#line 146 "lex.l"
	{ printf("Found OPERATOR_DIV: %s\n", yytext); return '/'; }
		YY_BREAK
	case 102:
	YY_RULE_SETUP
	#line 147 "lex.l"
	{ printf("Found OPERATOR_EXPONENT: %s\n", yytext); return '^'; }
		YY_BREAK
	case 103:
	YY_RULE_SETUP
	#line 148 "lex.l"
	{ printf("Found OPERATOR_INTEGER_DIVISION: %s\n", yytext); return '\\'; }
		YY_BREAK
	case 104:
	YY_RULE_SETUP
	#line 149 "lex.l"
	{ printf("Found OPERATOR_ampersand: %s\n", yytext); return '&'; }
		YY_BREAK
	case 105:
	YY_RULE_SETUP
	#line 151 "lex.l"
	{ printf("Found OPERATOR_ASSIGNMENT: %s\n", yytext); return '='; }
		YY_BREAK
	case 106:
	YY_RULE_SETUP
	#line 152 "lex.l"
	{ printf("Found OPERATOR_EQUAL: %s\n", yytext); }
		YY_BREAK
	case 107:
	YY_RULE_SETUP
	#line 153 "lex.l"
	{ printf("Found OPERATOR_NOT_EQUAL: %s\n", yytext); return NOT_EQUAL; }
		YY_BREAK
	case 108:
	YY_RULE_SETUP
	#line 154 "lex.l"
	{ printf("Found OPERATOR_LESS: %s\n", yytext); return '<'; }
		YY_BREAK
	case 109:
	YY_RULE_SETUP
	#line 155 "lex.l"
	{ printf("Found OPERATOR_MORE: %s\n", yytext); return '>'; }
		YY_BREAK
	case 110:
	YY_RULE_SETUP
	#line 156 "lex.l"
	{ printf("Found OPERATOR_LESS_OR_EQUAL: %s\n", yytext); return LESS_OR_SAME; }
		YY_BREAK
	case 111:
	YY_RULE_SETUP
	#line 157 "lex.l"
	{ printf("Found OPERATOR_MORE_OR_EQUAL: %s\n", yytext); return MORE_OR_SAME; }
		YY_BREAK
	case 112:
	YY_RULE_SETUP
	#line 158 "lex.l"
	{ printf("Found OPERATOR_BIT_LEFT_SHIFT: %s\n", yytext); return BIT_LEFT_SHIFT; }
		YY_BREAK
	case 113:
	YY_RULE_SETUP
	#line 159 "lex.l"
	{ printf("Found OPERATOR_BIT_RIGHT_SHIFT: %s\n", yytext); return BIT_RIGHT_SHIFT; }
		YY_BREAK
	case 114:
	YY_RULE_SETUP
	#line 161 "lex.l"
	{ printf("Found OPERATOR_PLUS_ASSIGNMENT: %s\n", yytext); return PLUS_ASSIGNMENT; }
		YY_BREAK
	case 115:
	YY_RULE_SETUP
	#line 162 "lex.l"
	{ printf("Found OPERATOR_MINUS_ASSIGNMENT: %s\n", yytext); return MINUS_ASSIGNMENT; }
		YY_BREAK
	case 116:
	YY_RULE_SETUP
	#line 163 "lex.l"
	{ printf("Found OPERATOR_MUL_ASSIGNMENT: %s\n", yytext); return MUL_ASSIGNMENT; }
		YY_BREAK
	case 117:
	YY_RULE_SETUP
	#line 164 "lex.l"
	{ printf("Found OPERATOR_DIV_ASSIGNMENT: %s\n", yytext); return DIV_ASSIGNMENT; }
		YY_BREAK
	case 118:
	YY_RULE_SETUP
	#line 165 "lex.l"
	{ printf("Found OPERATOR_EXP_ASSIGNMENT: %s\n", yytext); return EXP_ASSIGNMENT; }
		YY_BREAK
	case 119:
	YY_RULE_SETUP
	#line 166 "lex.l"
	{ printf("Found OPERATOR_BIT_AND_ASSIGNMENT: %s\n", yytext); return BIT_AND_ASSIGNMENT; }
		YY_BREAK
	case 120:
	YY_RULE_SETUP
	#line 167 "lex.l"
	{ printf("Found OPERATOR_DIV_NUM_ASSIGNMENT: %s\n", yytext); return DIV_NUM_ASSIGNMENT; }
		YY_BREAK
	case 121:
	YY_RULE_SETUP
	#line 168 "lex.l"
	{ printf("Found OPERATOR_BIT_LEFT_SHIFT_ASSIGNMENT: %s\n", yytext); return BIT_LEFT_SHIFT_ASSIGNMENT; }
		YY_BREAK
	case 122:
	YY_RULE_SETUP
	#line 169 "lex.l"
	{ printf("Found OPERATOR_BIT_RIGHT_SHIFT_ASSIGNMENT: %s\n", yytext); return BIT_RIGHT_SHIFT_ASSIGNMENT; }
		YY_BREAK
	case 123:
	YY_RULE_SETUP
	#line 171 "lex.l"
	{ printf("Found OPERATOR_POINT: %s\n", yytext); }
		YY_BREAK
	case 124:
	YY_RULE_SETUP
	#line 173 "lex.l"
	{ printf("Found LEFT_BRACKET: %s\n", yytext); return '('; }
		YY_BREAK
	case 125:
	YY_RULE_SETUP
	#line 174 "lex.l"
	{ printf("Found RIGHT_BRACKET: %s\n", yytext); return ')'; }
		YY_BREAK
	case 126:
	YY_RULE_SETUP
	#line 175 "lex.l"
	{ printf("Found LEFT_SQUARE_BRACKET: %s\n", yytext); return '['; }
		YY_BREAK
	case 127:
	YY_RULE_SETUP
	#line 176 "lex.l"
	{ printf("Found RIGHT_SQUARE_BRACKET: %s\n", yytext); return ']'; }
		YY_BREAK
	case 128:
	YY_RULE_SETUP
	#line 177 "lex.l"
	{ printf("Found LEFT_FIGURE_BRACKET: %s\n", yytext);  return '{'; }
		YY_BREAK
	case 129:
	YY_RULE_SETUP
	#line 178 "lex.l"
	{ printf("Found RIGHT_FIGURE_BRACKET: %s\n", yytext); return '}'; }
		YY_BREAK
	case 130:
	YY_RULE_SETUP
	#line 180 "lex.l"
	{ printf("Found COMMA: %s\n", yytext); return ','; }
		YY_BREAK
	case 131:
	YY_RULE_SETUP
	#line 183 "lex.l"
	{ printf("Found COMMENT: %s\n", yytext); }
		YY_BREAK
	case 132:
	YY_RULE_SETUP
	#line 185 "lex.l"
	{ strcpy(str,""); BEGIN(STRING_VAL); }
		YY_BREAK
	case 133:
	YY_RULE_SETUP
	#line 186 "lex.l"
	{ strcat(str, """"); }
		YY_BREAK
	case 134:
	YY_RULE_SETUP
	#line 187 "lex.l"
	{ strcat(str,yytext); }
		YY_BREAK
	case 135:
	YY_RULE_SETUP
	#line 188 "lex.l"
	{ printf("Found STRING: %s\n", str); BEGIN(INITIAL); yylval.string_literal = new string(str); return STRING; }
		YY_BREAK
	case 136:
	YY_RULE_SETUP
	#line 189 "lex.l"
	{ printf("STRING Error in line %d: there is line translation\n", lineNumber); BEGIN(INITIAL); }
		YY_BREAK
	case YY_STATE_EOF(STRING_VAL):
	#line 190 "lex.l"
	{ printf("STRING Error in line %d: there is no closing quotation mark\n", lineNumber); BEGIN(INITIAL); }
		YY_BREAK
	case 137:
	YY_RULE_SETUP
	#line 196 "lex.l"
	{

		printf("Found DECIMAL_NUMBER: %d\n", atoi(yytext));
		yylval.decimal_number = atoi(yytext);
		return DECIMAL_NUMBER;
	}
		YY_BREAK
	case 138:
	YY_RULE_SETUP
	#line 204 "lex.l"
	{
		printf("Found DOUBLE: %lf\n", atof(yytext), yytext);
		yylval.double_literal = atof(yytext);
		return DOUBLE;
	}
		YY_BREAK
	case 139:
	YY_RULE_SETUP
	#line 210 "lex.l"
	{
		printf("Found DOUBLE: %lf\n", atof(yytext));
		yylval.double_literal = atof(yytext);
		return DOUBLE;
	}
		YY_BREAK
	case 140:
	YY_RULE_SETUP
	#line 216 "lex.l"
	{ printf("Found IDENTIFIER: %s\n", yytext); yylval.identifier = new string(yytext);  return IDENTIFIER; }
		YY_BREAK
	case YY_STATE_EOF(INITIAL):
	case YY_STATE_EOF(ARRAY):
	case YY_STATE_EOF(NUMBER):
	#line 218 "lex.l"
	{ if (!finished) { finished = true; printf("Found end file: %s\n", yytext); return TOKEN_LINE; yyterminate(); } else { yyterminate(); } }
		YY_BREAK
	case 141:
	YY_RULE_SETUP
	#line 220 "lex.l"
	ECHO;
		YY_BREAK
	#line 1708 "lex.yy.c"

		case YY_END_OF_BUFFER:
			{
			/* Amount of text matched not including the EOB char. */
			int yy_amount_of_matched_text = (int)(yy_cp - yytext_ptr) - 1;

			/* Undo the effects of YY_DO_BEFORE_ACTION. */
			*yy_cp = yy_hold_char;

			if (yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW)
				{
				/* We're scanning a new file or input source.  It's
				 * possible that this happened because the user
				 * just pointed yyin at a new source and called
				 * yylex().  If so, then we have to assure
				 * consistency between yy_current_buffer and our
				 * globals.  Here is the right place to do so, because
				 * this is the first action (other than possibly a
				 * back-up) that will match for the new input source.
				 */
				yy_n_chars = yy_current_buffer->yy_n_chars;
				yy_current_buffer->yy_input_file = yyin;
				yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
				}

			/* Note that here we test for yy_c_buf_p "<=" to the position
			 * of the first EOB in the buffer, since yy_c_buf_p will
			 * already have been incremented past the NUL character
			 * (since all states make transitions on EOB to the
			 * end-of-buffer state).  Contrast this with the test
			 * in input().
			 */
			if (yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars])
				{ /* This was really a NUL. */
				yy_state_type yy_next_state;

				yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				/* Okay, we're now positioned to make the NUL
				 * transition.  We couldn't have
				 * yy_get_previous_state() go ahead and do it
				 * for us because it doesn't know how to deal
				 * with the possibility of jamming (and we don't
				 * want to build jamming into it because then it
				 * will run more slowly).
				 */

				yy_next_state = yy_try_NUL_trans(yy_current_state);

				yy_bp = yytext_ptr + YY_MORE_ADJ;

				if (yy_next_state)
					{
					/* Consume the NUL. */
					yy_cp = ++yy_c_buf_p;
					yy_current_state = yy_next_state;
					goto yy_match;
					}

				else
					{
					yy_cp = yy_c_buf_p;
					goto yy_find_action;
					}
				}

			else switch (yy_get_next_buffer())
				{
				case EOB_ACT_END_OF_FILE:
					{
					yy_did_buffer_switch_on_eof = 0;

					if (yywrap())
						{
						/* Note: because we've taken care in
						 * yy_get_next_buffer() to have set up
						 * yytext, we can now set up
						 * yy_c_buf_p so that if some total
						 * hoser (like flex itself) wants to
						 * call the scanner after we return the
						 * YY_NULL, it'll still work - another
						 * YY_NULL will get returned.
						 */
						yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

						yy_act = YY_STATE_EOF(YY_START);
						goto do_action;
						}

					else
						{
						if (!yy_did_buffer_switch_on_eof)
							YY_NEW_FILE;
						}
					break;
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p =
						yytext_ptr + yy_amount_of_matched_text;

					yy_current_state = yy_get_previous_state();

					yy_cp = yy_c_buf_p;
					yy_bp = yytext_ptr + YY_MORE_ADJ;
					goto yy_match;

				case EOB_ACT_LAST_MATCH:
					yy_c_buf_p =
					&yy_current_buffer->yy_ch_buf[yy_n_chars];

					yy_current_state = yy_get_previous_state();

					yy_cp = yy_c_buf_p;
					yy_bp = yytext_ptr + YY_MORE_ADJ;
					goto yy_find_action;
				}
			break;
			}

		default:
			YY_FATAL_ERROR(
				"fatal flex scanner internal error--no action found");
		} /* end of action switch */
			} /* end of scanning one token */
} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

	static int yy_get_next_buffer()
{
	register char* dest = yy_current_buffer->yy_ch_buf;
	register char* source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if (yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1])
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--end of buffer missed");

	if (yy_current_buffer->yy_fill_buffer == 0)
	{ /* Don't try to fill the buffer, so this is an EOF. */
		if (yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1)
		{
			/* We matched a singled characater, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
		}

		else
		{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
		}
	}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int)(yy_c_buf_p - yytext_ptr) - 1;

	for (i = 0; i < number_to_move; ++i)
		*(dest++) = *(source++);

	if (yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING)
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_n_chars = 0;

	else
	{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while (num_to_read <= 0)
		{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
				"input buffer overflow, can't enlarge buffer because scanner uses REJECT");
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int)(yy_c_buf_p - b->yy_ch_buf);

			if (b->yy_is_our_buffer)
			{
				int new_size = b->yy_buf_size * 2;

				if (new_size <= 0)
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char*)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc((void*)b->yy_ch_buf,
						b->yy_buf_size + 2);
			}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if (!b->yy_ch_buf)
				YY_FATAL_ERROR(
					"fatal error - scanner input buffer overflow");

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
				number_to_move - 1;
#endif
		}

		if (num_to_read > YY_READ_BUF_SIZE)
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT((&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read);
	}

	if (yy_n_chars == 0)
	{
		if (number_to_move == YY_MORE_ADJ)
		{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin);
		}

		else
		{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
		}
	}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char* yy_cp;

	yy_current_state = yy_start;

	for (yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp)
	{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if (yy_accept[yy_current_state])
		{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
		}
		while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state)
		{
			yy_current_state = (int)yy_def[yy_current_state];
			if (yy_current_state >= 546)
				yy_c = yy_meta[(unsigned int)yy_c];
		}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int)yy_c];
	}

	return yy_current_state;
}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans(yy_state_type yy_current_state)
#else
static yy_state_type yy_try_NUL_trans(yy_current_state)
yy_state_type yy_current_state;
#endif
{
	register int yy_is_jam;
	register char* yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if (yy_accept[yy_current_state])
	{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
	}
	while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state)
	{
		yy_current_state = (int)yy_def[yy_current_state];
		if (yy_current_state >= 546)
			yy_c = yy_meta[(unsigned int)yy_c];
	}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int)yy_c];
	yy_is_jam = (yy_current_state == 545);

	return yy_is_jam ? 0 : yy_current_state;
}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput(int c, register char* yy_bp)
#else
static void yyunput(c, yy_bp)
int c;
register char* yy_bp;
#endif
{
	register char* yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if (yy_cp < yy_current_buffer->yy_ch_buf + 2)
	{ /* need to shift things up to make room */
	/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char* dest = &yy_current_buffer->yy_ch_buf[
			yy_current_buffer->yy_buf_size + 2];
		register char* source =
			&yy_current_buffer->yy_ch_buf[number_to_move];

		while (source > yy_current_buffer->yy_ch_buf)
			*--dest = *--source;

		yy_cp += (int)(dest - source);
		yy_bp += (int)(dest - source);
		yy_n_chars = yy_current_buffer->yy_buf_size;

		if (yy_cp < yy_current_buffer->yy_ch_buf + 2)
			YY_FATAL_ERROR("flex scanner push-back overflow");
	}

	*--yy_cp = (char)c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if (*yy_c_buf_p == YY_END_OF_BUFFER_CHAR)
	{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if (yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars])
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
		{ /* need more input */
			yytext_ptr = yy_c_buf_p;
			++yy_c_buf_p;

			switch (yy_get_next_buffer())
			{
			case EOB_ACT_END_OF_FILE:
			{
				if (yywrap())
				{
					yy_c_buf_p =
						yytext_ptr + YY_MORE_ADJ;
					return EOF;
				}

				if (!yy_did_buffer_switch_on_eof)
					YY_NEW_FILE;
#ifdef __cplusplus
				return yyinput();
#else
				return input();
#endif
			}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
				break;

			case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
				YY_FATAL_ERROR(
					"unexpected last match in yyinput()");
#else
				YY_FATAL_ERROR(
					"unexpected last match in input()");
#endif
			}
		}
	}

	c = *(unsigned char*)yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
}


#ifdef YY_USE_PROTOS
void yyrestart(FILE* input_file)
#else
void yyrestart(input_file)
FILE* input_file;
#endif
{
	if (!yy_current_buffer)
		yy_current_buffer = yy_create_buffer(yyin, YY_BUF_SIZE);

	yy_init_buffer(yy_current_buffer, input_file);
	yy_load_buffer_state();
}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer(YY_BUFFER_STATE new_buffer)
#else
void yy_switch_to_buffer(new_buffer)
YY_BUFFER_STATE new_buffer;
#endif
{
	if (yy_current_buffer == new_buffer)
		return;

	if (yy_current_buffer)
	{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
	}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state(void)
#else
void yy_load_buffer_state()
#endif
{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer(FILE* file, int size)
#else
YY_BUFFER_STATE yy_create_buffer(file, size)
FILE* file;
int size;
#endif
{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE)yy_flex_alloc(sizeof(struct yy_buffer_state));
	if (!b)
		YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char*)yy_flex_alloc(b->yy_buf_size + 2);
	if (!b->yy_ch_buf)
		YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b, file);

	return b;
}


#ifdef YY_USE_PROTOS
void yy_delete_buffer(YY_BUFFER_STATE b)
#else
void yy_delete_buffer(b)
YY_BUFFER_STATE b;
#endif
{
	if (!b)
		return;

	if (b == yy_current_buffer)
		yy_current_buffer = (YY_BUFFER_STATE)0;

	if (b->yy_is_our_buffer)
		yy_flex_free((void*)b->yy_ch_buf);

	yy_flex_free((void*)b);
}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO((int));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer(YY_BUFFER_STATE b, FILE* file)
#else
void yy_init_buffer(b, file)
YY_BUFFER_STATE b;
FILE* file;
#endif


{
	yy_flush_buffer(b);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty(fileno(file)) > 0) : 0;
#endif
#endif
}


#ifdef YY_USE_PROTOS
void yy_flush_buffer(YY_BUFFER_STATE b)
#else
void yy_flush_buffer(b)
YY_BUFFER_STATE b;
#endif

{
	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if (b == yy_current_buffer)
		yy_load_buffer_state();
}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer(char* base, yy_size_t size)
#else
YY_BUFFER_STATE yy_scan_buffer(base, size)
char* base;
yy_size_t size;
#endif
{
	YY_BUFFER_STATE b;

	if (size < 2 ||
		base[size - 2] != YY_END_OF_BUFFER_CHAR ||
		base[size - 1] != YY_END_OF_BUFFER_CHAR)
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE)yy_flex_alloc(sizeof(struct yy_buffer_state));
	if (!b)
		YY_FATAL_ERROR("out of dynamic memory in yy_scan_buffer()");

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b);

	return b;
}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string(yyconst char* str)
#else
YY_BUFFER_STATE yy_scan_string(str)
yyconst char* str;
#endif
{
	int len;
	for (len = 0; str[len]; ++len)
		;

	return yy_scan_bytes(str, len);
}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes(yyconst char* bytes, int len)
#else
YY_BUFFER_STATE yy_scan_bytes(bytes, len)
yyconst char* bytes;
int len;
#endif
{
	YY_BUFFER_STATE b;
	char* buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char*)yy_flex_alloc(n);
	if (!buf)
		YY_FATAL_ERROR("out of dynamic memory in yy_scan_bytes()");

	for (i = 0; i < len; ++i)
		buf[i] = bytes[i];

	buf[len] = buf[len + 1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf, n);
	if (!b)
		YY_FATAL_ERROR("bad buffer in yy_scan_bytes()");

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state(int new_state)
#else
static void yy_push_state(new_state)
int new_state;
#endif
{
	if (yy_start_stack_ptr >= yy_start_stack_depth)
	{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof(int);

		if (!yy_start_stack)
			yy_start_stack = (int*)yy_flex_alloc(new_size);

		else
			yy_start_stack = (int*)yy_flex_realloc(
				(void*)yy_start_stack, new_size);

		if (!yy_start_stack)
			YY_FATAL_ERROR(
				"out of memory expanding start-condition stack");
	}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
{
	if (--yy_start_stack_ptr < 0)
		YY_FATAL_ERROR("start-condition stack underflow");

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
{
	return yy_start_stack[yy_start_stack_ptr - 1];
}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error(yyconst char msg[])
#else
static void yy_fatal_error(msg)
char msg[];
#endif
{
	(void)fprintf(stderr, "%s\n", msg);
	exit(YY_EXIT_FAILURE);
}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n - YY_MORE_ADJ; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy(char* s1, yyconst char* s2, int n)
#else
static void yy_flex_strncpy(s1, s2, n)
char* s1;
yyconst char* s2;
int n;
#endif
{
	register int i;
	for (i = 0; i < n; ++i)
		s1[i] = s2[i];
}
#endif


#ifdef YY_USE_PROTOS
static void* yy_flex_alloc(yy_size_t size)
#else
static void* yy_flex_alloc(size)
yy_size_t size;
#endif
{
	return (void*)malloc(size);
}

#ifdef YY_USE_PROTOS
static void* yy_flex_realloc(void* ptr, yy_size_t size)
#else
static void* yy_flex_realloc(ptr, size)
void* ptr;
yy_size_t size;
#endif
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void*)realloc((char*)ptr, size);
}

#ifdef YY_USE_PROTOS
static void yy_flex_free(void* ptr)
#else
static void yy_flex_free(ptr)
void* ptr;
#endif
{
	free(ptr);
}

#if YY_MAIN
int main()
{
	yylex();
	return 0;
}
#endif
#line 220 "lex.l"



void eraseType(char* typeName)
{
	strcpy(str, yytext);
	char* p = strstr(str, typeName);
	if (p != NULL)
	{
		int pos = strlen(str) - strlen(typeName);
		str[pos] = 0;
	}
}

#define release

int main(int argc, char** argv) {

#ifdef release
	if (argc != 2) {
		printf("Filename is not found");
		return 1;
	}

	const char* filename = argv[1];

#else
	const char* filename = "C:\\Compiler\\vba_compiler\\prog11.vb";
#endif
	FILE* file = fopen(filename, "r");
	if (file == NULL) {
		printf("File opening error");
		return 1;
	}

	yyin = file;
	yyparse();
	fclose(file);

	string dot;
	extern CodeNode* global_program_code;
	global_program_code->toDot(dot);
	std::cout << dot << "\n";

	std::ofstream out("dot-tree.txt");
	out << dot << "\n";

	return 0;
}